{{!< default}}
{{!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template --}}

{{!--
<header class="site-home-header">
    {{> header-background background=@site.cover_image}} --}}{{!--Special header-image.hbs partial to generate the background image--}}{{!--
        <div class="inner">
            {{> "site-nav"}}
            <div class="site-header-content">
                <h1 class="site-title">
                    {{#if @site.logo}}
                        <img class="site-logo" src="{{img_url @site.logo size="l"}}" alt="{{@site.title}}" />
                    {{else}}
                        {{@site.title}}
                    {{/if}}
                </h1>
                <h2 class="site-description">{{@site.description}}</h2>
            </div>
        </div>
    </div>
</header>
--}}

{{!-- The main content area --}}
<main id="site-main" class="site-main outer">
    <div class="inner posts">

        <div class="post-feed">
            {{#foreach posts}}

                {{!-- The tag below includes the markup for each post - partials/post-card.hbs --}}
                {{> "post-strip"}}

            {{/foreach}}
        </div>

    </div>
</main>

{{!--
{{> site-header}}
--}}

{{!-- The #contentFor helper here will send everything inside it up to the matching #block helper found in default.hbs --}}
{{#contentFor "scripts"}}
<script>
    function setRandomHorizontalOffset(element) {
        // TODO check if hovering, if so interrupt?
        const leftSpaceProportion = Math.random() * .99;
        const odds = leftSpaceProportion / (1 - leftSpaceProportion);
        element.children[0].style.flexGrow = odds;
        element.children[2].style.flexShrink = odds;
        // queue next one after 15 - 90 seconds mwahahaha
        setTimeout(function() {
            setRandomHorizontalOffset(element);
        }, 1000 * (15 + 75 * Math.random()));
    }

    const posts = document.getElementsByClassName('post-strip');

    // do some random!
    for (var i = 0; i < posts.length; i++) {
        // set new (vertical) order using flex-box order feature:
        posts[i].style.order = Math.floor( posts.length * Math.random() );
        // random horizontal offset across the page
        setRandomHorizontalOffset(posts[i]);
        // slight random vertical offset within the line-strips
        // (make sure randomization can't produce proximity closer than 20% of item height)
        posts[i].style.paddingTop = Math.random() * .9 * (posts[i].clientHeight - posts[i].children[0].clientHeight) + 'px';
    }

    // first horizontal shift is abrupt, but then turn on smooth animation
    setTimeout(function() {
        for (var i = 0; i < posts.length; i++) {
                posts[i].children[0].style.transitionProperty = 'flex';
                console.log(posts[i].style);
            }
        }, 500);

    const backgroundId = Math.floor(Math.random() * 15); // 0 - 14
    var largestWidthLoaded = 0;
    function setResponsiveBackground () {
      const minimumWidth = window.innerWidth * Math.max(1, (4 * window.innerHeight ) / ( 3 * window.innerWidth));
      const responsiveWidth = 200 * Math.ceil(minimumWidth / 200);
      if (responsiveWidth > largestWidthLoaded) {
        largestWidthLoaded = responsiveWidth;
        const bgImageFilename = 'https://res.cloudinary.com/futile/image/upload/w_' + responsiveWidth + ',q_auto,fl_progressive:steep/twyi/bg/bg' + backgroundId + '.jpg';
        document.getElementById('site-main').style.backgroundImage = "url('" + bgImageFilename + "')";
      }
    }
    setResponsiveBackground();
    window.addEventListener('resize', function() {
        setResponsiveBackground();
        // TODO clamp left-Padding?
    });

</script>

{{!--
    // NOTE: Scroll performance is poor in Safari
    // - this appears to be due to the events firing much more slowly in Safari.
    //   Dropping the scroll event and using only a raf loop results in smoother
    //   scrolling but continuous processing even when not scrolling
    $(document).ready(function () {
        
        var nav = document.querySelector('.site-nav-main .site-nav');
        var feed = document.querySelector('.post-feed');

        var lastScrollY = window.scrollY;
        var lastWindowHeight = window.innerHeight;
        var lastDocumentHeight = $(document).height();
        var ticking = false;

        function onScroll() {
            lastScrollY = window.scrollY;
            requestTick();
        }

        function onResize() {
            lastWindowHeight = window.innerHeight;
            lastDocumentHeight = $(document).height();
            requestTick();
            setResponsiveBackground();
        }

        function requestTick() {
            if (!ticking) {
                requestAnimationFrame(update);
            }
            ticking = true;
        }

        function update() {
            var trigger = feed.getBoundingClientRect().top + window.scrollY;
            var progressMax = lastDocumentHeight - lastWindowHeight;

            // show/hide nav
            if (lastScrollY >= trigger - 20) {
                nav.classList.add('fixed-nav-active');
            } else {
                nav.classList.remove('fixed-nav-active');
            }

            ticking = false;
        }

        window.addEventListener('scroll', onScroll, { passive: true });
        window.addEventListener('resize', onResize, false);

        update();

    });
</script>
--}}
{{/contentFor}}
